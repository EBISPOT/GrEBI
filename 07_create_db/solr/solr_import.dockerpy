import sys
import os
import shutil
import subprocess
import time
import glob
import requests
from concurrent.futures import ThreadPoolExecutor, as_completed
import multiprocessing

WORKERS=32

# workaround to disable proxy which prevents us from reaching localhost
# https://stackoverflow.com/questions/28521535/requests-how-to-disable-bypass-proxy
session = requests.Session()
session.trust_env = False

def main():
    if len(sys.argv) != 3:
        print("Usage: {} <core> <tmp_port_to_use>".format(sys.argv[0]))
        print("core: grebi_autocomplete, grebi_nodes, grebi_edges")
        sys.exit(1)

    core = sys.argv[1]
    port = sys.argv[2]

    os.chdir('/opt/solr')

    core_data_path = f"/var/solr/data/{core}"

    os.system("cp /config/*.xml /var/solr/data/")
    os.system("cp /config/*.cfg /var/solr/data/")
    os.system(f"cp -r /config/{core} /var/solr/data/{core}")
    
    print("/var/solr/data")
    os.system("find /var/solr/data")

    os.environ['SOLR_ENABLE_REMOTE_STREAMING'] = 'true'
    os.environ['SOLR_SECURITY_MANAGER_ENABLED'] = 'false'

    subprocess.run(['solr', 'start', '-m', '128g', '-p', port, '-noprompt', '-force'])

    time.sleep(5)

    subprocess.run(['wait-for-solr.sh', '--solr-url', f"http://localhost:{port}/solr/{core}/select?q=*:*"])

    time.sleep(5)

    if core == "grebi_autocomplete":
        print("Uploading names.txt")
        response = session.get(f"http://localhost:{port}/solr/grebi_autocomplete/update",
                                params={
                                    'stream.file': '/names.txt',
                                    'fieldnames': 'label',
                                    'separator': '\x00',
                                    'stream.contentType': 'application/csv;charset=utf-8',
                                    'commit': 'true'
                                })
        print(response.text)

    elif core in {"grebi_nodes", "grebi_edges"}:
        filenames = glob.glob('/mnt/*.jsonl')
        with ThreadPoolExecutor(max_workers=WORKERS) as executor:
            futures = [executor.submit(upload_file, core, port, filename) for filename in filenames if os.path.exists(filename)]
        
        time.sleep(5)
        response = session.get(f"http://127.0.0.1:{port}/solr/{core}/update",
                                params={'commit': 'true'})
        print(response.text)

    else:
        print("Invalid core")
        sys.exit(1)

    os.environ['SOLR_STOP_WAIT'] = '500'
    subprocess.run(['solr', 'stop', '-p', port])

def upload_file(core, port, filename):
    print(f"Uploading {core.split('_')[1]} file: {filename}")
    response = session.get(f"http://localhost:{port}/solr/{core}/update/json/docs",
                            params={
                                'stream.file': filename,
                                'stream.contentType': 'application/json;charset=utf-8',
                                'commit': 'true'
                            })
    r = response.text.replace("\n", "")
    print(f"Uploaded {filename}: {r}")

if __name__ == "__main__":
    main()
